Event Messaging Sequence Invocation
===================================================
1)  Invoke xEvent (e.g. new xEvent();)
2)  xEventMessage is Sent to MessageManager
3)  MessageManager dispatches to xEventHandler
4)  xEventHandler invoke this.onxEvent(...payload) method
5)  Performs all work for Event


PLAYER TOON LOAD
===================================================
1)  Load the Player's toon from the FS
2)  Construct the Entity, set Entity in GameManager for Player
    a)  Ensure all Entity events are in working order for construction/destruction
3)  Continue with {{PLAYER INPUT > MAP POSITION UPDATE}}


GAME MANAGER
===================================================
3)  Build with strong sided functionality so Client and Server can use for easily
4)  Once Player management paradigm completed
5)  Continue with {{PLAYER INPUT > MAP POSITION UPDATE}}


PLAYER INPUT > MAP POSITION UPDATE
===================================================
1)  InputHandler > onInputPlayerKeyStateMessage should invoke Component > Mutator > States > some InputKeyStateMessage handler function
    a)  Segment handler function into different types for MOVEMENT, ACTION, etc.
2)  Component > Mutator > States should invoke other Mutators, as necessary, on State changes
    a)  Can also/instead just fire Events and have other Mutators pick up the messages
3)  Invoke Position changed Messages/Events and propagate appropriately
    a)  .Tick(time) already gets the tick time delta


DATA WATCHER
===================================================
1)  Build Master/Slave setup where any Server changes invoke Messages/Packets to Client(s)
    a)  If Client changes, only send to Server if necessary
    b)  Hook all changes into Event Bus, so all changes will invoke Messages/Packets when necessary